#!/usr/bin/env zsh

function usage() {
	[[ $# -ge 1 ]] && echo >&2 error: "$@"
	cat >&2 <<EOF
Usage: ${0##*/} <directory> [<pattern>]

Interactive pattern finder using fzf and ripgrep.

Requirements:
  - zsh shell
    - version: zsh 5.9 (x86_64-debian-linux-gnu)
  - fzf: A command-line fuzzy finder
    - version: 0.38.0 (debian)
    - source: https://github.com/junegunn/fzf
  - ripgrep: A pattern matcher
    - version: ripgrep 13.0.0
    - source: https://github.com/BurntSushi/ripgrep
EOF
	exit 2
}

if [ "$#" -lt 1 ]; then
	usage "missing positional argument <directory>"
fi

set -e

cd $1

# source:
# https://github.com/junegunn/fzf/blob/923c3a814de39ff906d675834af634252b3d2b3f/ADVANCED.md#switching-between-ripgrep-mode-and-fzf-mode-using-a-single-key-binding

call_ripgrep() {
	local CMD="rg"

	# seach in directories and files, starting with dot
	CMD="${CMD} --hidden"
	# ... except git
	CMD="${CMD} --glob=!.git/"

	# don't bother to color anything, cause of preview
	CMD="${CMD} --color=never"

	# explicitly tell to not sort anything
	CMD="${CMD} --sort=none"

	# do not group matches, use grep-like output
	CMD="${CMD} --no-heading"

	# include number of matching line in result
	CMD="${CMD} --line-number"

	# add placeholder for fzf query
	CMD="${CMD} {q}"

	# strip matching pattern, since it is useless of cause of preview
	# source: https://github.com/BurntSushi/ripgrep/discussions/2031#discussioncomment-1514043
	CMD="${CMD} | cut --delimiter=':' --fields=1-2"

	echo "${CMD}"
}

call_grep() {
	local CMD="grep"

	# don't bother to color anything, cause of preview
	CMD="${CMD} --color=never"

	# traverse current directory recursively
	CMD="${CMD} --recursive"

	# process a binary file as if it did not contain matching data;
	CMD="${CMD} --binary-files=without-match"

	# exclude .git dir
	CMD="${CMD} --exclude-dir=.git"

	# include number of matching line in result
	CMD="${CMD} --line-number"

	# add placeholder for fzf query
	CMD="${CMD} {q}"

	# strip matching pattern, since it is useless of cause of preview
	# source: https://stackoverflow.com/a/6958981/15751315
	CMD="${CMD} | cut --delimiter=':' --fields=1-2"

	echo "${CMD}"
}

CMD=""
if command -v rg 2>&1 1>/dev/null; then
	CMD="$(call_ripgrep)"
elif command -v grep 2>&1 1>/dev/null; then
	CMD="$(call_grep)"
fi

[ -n "${CMD}" ] || exit 1

__get_file_preview_renderer() {
	if command -v bat 2>&1 1>/dev/null; then
		echo "bat --color=always --decorations=always --style=numbers {1} --highlight-line {2}";
	else
		# get meaningful preview:
		# 1. highlight query with grep, match everything else without color
		# 1. add number lines with nl
		echo "grep --color=always --regexp '{q}' --regexp '^' {1} | nl";
	fi
}

# -U: alias  expansion  is  suppressed  when  the function is loaded.
# -z: mark the function to be autoloaded using the zsh style
autoload -Uz is-at-least
fzf_version="${${(As: :)$(fzf --version 2>/dev/null)}[1]}"

fzf_options=()

# good for searching filenames
# source: https://github.com/junegunn/fzf/issues/191#issuecomment-93650839
fzf_options+=( --tiebreak=end )

fzf_options+=( --prompt="Search > " )
fzf_options+=( --bind="change:reload:sleep 0.4; [ -z {q} ] || ${CMD} || true" )

# Switch between Ripgrep mode and fzf mode using a single key binding.
# Transform action is introduced in fzf 0.45.0.
# source: https://github.com/junegunn/fzf/blob/354d0468c126c4e03b3578a752afedfd6451fd0d/ADVANCED.md#switching-between-ripgrep-mode-and-fzf-mode-using-a-single-key-binding
if is-at-least 0.45 "$fzf_version"; then
	rm -f /tmp/rg-fzf-{r,f}
	fzf_options+=( --header='CTRL-T: Switch between Search/Include' )
	fzf_options+=( --bind='ctrl-t:transform:[[ ! $FZF_PROMPT =~ Search ]] &&
			echo "rebind(change)+change-prompt(Search > )+disable-search+transform-query:echo \{q} > /tmp/rg-fzf-f; cat /tmp/rg-fzf-r" ||
			echo "unbind(change)+change-prompt(Include > )+enable-search+transform-query:echo \{q} > /tmp/rg-fzf-r; cat /tmp/rg-fzf-f"' )
fi

fzf \
		--disabled \
		"${fzf_options[@]}" \
		--query "${2:-}" \
		--layout=reverse \
		--delimiter : \
		--preview "[ -z {2} ] || $(__get_file_preview_renderer)" \
		--preview-window 'right,70%,border-left,+{2}+3/3' \
	| while read fn; do
		# Output each selected file name with proper quoting.
		printf "%s%b" ${(q)fn} ${separator}
	done
